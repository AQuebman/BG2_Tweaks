DEFINE_PATCH_MACRO ~save_via_level~ BEGIN

  READ_LONG  0x34 "level"
  READ_LONG  0x64 "abil_off"
  READ_SHORT 0x68 "abil_num"
  READ_LONG  0x6a "fx_off"
  SET "fx_delta" = 0
  SET "save_bonus" = 0
  SET "step" = 5
  PATCH_IF (("%spell_type%" = 2) AND ("%level%" = 7)) BEGIN // priest l7 spells only exception
    SET "target" = 14 + "%step%"
  END ELSE BEGIN
    SET "target_level" = ((("%level%" * 2) - 1) + "%step%")
  END
  FOR (index = 0 ; index < abil_num ; index = index + 1) BEGIN
    PATCH_IF ("%index%" = 0) BEGIN
      WRITE_SHORT ("%abil_off%" + 0x10 + ("%index%" * 0x28)) 1
      SET "min_lev" = 1
    END ELSE BEGIN
      READ_SHORT ("%abil_off%" + 0x10 + ("%index%" * 0x28)) "min_lev"
    END
    PATCH_IF ("%min_lev%" <= "%target_level%") BEGIN
      PATCH_IF ("%min_lev%" = "%target_level%") BEGIN
        SET "save_bonus" = "%save_bonus%" - 1
        SET "target_level" = "%target_level%" + "%step%"
      END
      READ_SHORT  ("%abil_off%" + 0x1e + ("%index%" * 0x28)) "abil_fx_num" // reads number of fx
      READ_SHORT  ("%abil_off%" + 0x20 + ("%index%" * 0x28)) "abil_fx_idx" // reads index of effects
      SET "abil_fx_idx" = "%abil_fx_idx%" + "%fx_delta%"
      WRITE_SHORT ("%abil_off%" + 0x20 + ("%index%" * 0x28)) "%abil_fx_idx%" // adjusts index of effects
      FOR (index2 = 0 ; index2 < abil_fx_num ; index2 = index2 + 1) BEGIN
        READ_LONG    ("%fx_off%" + 0x24 + (("%abil_fx_idx%" + "%index2%") * 0x30)) "saves"           // duration
        READ_LONG    ("%fx_off%" + 0x28 + (("%abil_fx_idx%" + "%index2%") * 0x30)) "bonus"           // duration
        PATCH_IF ("%saves%" != 0) BEGIN // if save allowed on effect
          WRITE_LONG ("%fx_off%" + 0x28 + (("%abil_fx_idx%" + "%index2%") * 0x30)) ("%bonus%" + "%save_bonus%") // include new penalty
        END
      END
    END ELSE
    PATCH_IF ("%min_lev%" > "%target_level%") BEGIN
      // clone previous ability then
      READ_ASCII ("%abil_off%" +        (("%index%" - 1) * 0x28)) "abil_clone" (0x28) // read last ability
      READ_SHORT ("%abil_off%" + 0x1e + (("%index%" - 1) * 0x28)) "abil_fx_num" // reads number of fx from last ability
      READ_SHORT ("%abil_off%" + 0x20 + (("%index%" - 1) * 0x28)) "abil_fx_idx" // reads index of last effects from last ability
      // create effects for next level based off previous level effects
      FOR (index2 = abil_fx_num - 1 ; index2 >= 0 ; index2 = index2 - 1) BEGIN
        READ_ASCII     ("%fx_off%" +        (("%abil_fx_idx%" + "%index2%") * 0x30)) "clone_fx" (0x30) // reads entire effect
        READ_LONG      ("%fx_off%" + 0x24 + (("%abil_fx_idx%" + "%index2%") * 0x30)) "saves"           // duration
        READ_LONG      ("%fx_off%" + 0x28 + (("%abil_fx_idx%" + "%index2%") * 0x30)) "bonus"           // duration
        INSERT_BYTES   ("%fx_off%" +        (("%abil_fx_idx%" + "%abil_fx_num%") * 0x30)) 0x30
          WRITE_ASCIIE ("%fx_off%" +        (("%abil_fx_idx%" + "%abil_fx_num%") * 0x30)) "%clone_fx%" // clones effect
          PATCH_IF ("%saves%" != 0) BEGIN // if save allowed on effect
            WRITE_LONG  ("%fx_off%" + 0x28 + (("%abil_fx_idx%" + "%abil_fx_num%") * 0x30)) ("%bonus%" - 1) // include new penalty
          END
      END
      // effects created, now add new ability
      INSERT_BYTES            ("%abil_off%" +        ("%index%" * 0x28)) 0x28
        WRITE_EVALUATED_ASCII ("%abil_off%" +        ("%index%" * 0x28)) "%abil_clone%"   // clones last ability
        WRITE_SHORT           ("%abil_off%" + 0x10 + ("%index%" * 0x28)) "%target_level%" // min level
      SET "fx_delta" = ("%fx_delta%" + "%abil_fx_num%")
      SET "abil_num" = "%abil_num%" + 1
      SET "fx_off" = ("%fx_off%" + 0x28)
      SET "save_bonus" = "%save_bonus%" - 1
      SET "target_level" = "%target_level%" + "%step%"
    END
  END
  // now, to add abilities out to 50
  WHILE ("%target_level%" < 51) BEGIN
    // clone last ability
    READ_ASCII ("%abil_off%" +        (("%abil_num%" - 1) * 0x28)) "abil_clone" (0x28) // read last ability
    READ_SHORT ("%abil_off%" + 0x1e + (("%abil_num%" - 1) * 0x28)) "abil_fx_num" // reads number of fx from last ability
    READ_SHORT ("%abil_off%" + 0x20 + (("%abil_num%" - 1) * 0x28)) "abil_fx_idx" // reads index of last effects from last ability
    // create effects for next level based off previous level effects
    FOR (index2 = abil_fx_num - 1 ; index2 >= 0 ; index2 = index2 - 1) BEGIN
      READ_ASCII     ("%fx_off%" +        (("%abil_fx_idx%" + "%index2%") * 0x30)) "clone_fx" (0x30) // reads entire effect
      READ_LONG      ("%fx_off%" + 0x24 + (("%abil_fx_idx%" + "%index2%") * 0x30)) "saves"           // duration
      READ_LONG      ("%fx_off%" + 0x28 + (("%abil_fx_idx%" + "%index2%") * 0x30)) "bonus"           // duration
      INSERT_BYTES   ("%fx_off%" +        (("%abil_fx_idx%" + "%abil_fx_num%") * 0x30)) 0x30
        WRITE_ASCIIE ("%fx_off%" +        (("%abil_fx_idx%" + "%abil_fx_num%") * 0x30)) "%clone_fx%" // clones effect
        PATCH_IF ("%saves%" != 0) BEGIN // if save allowed on effect
          WRITE_LONG  ("%fx_off%" + 0x28 + (("%abil_fx_idx%" + "%abil_fx_num%") * 0x30)) ("%bonus%" - 1) // include new penalty
        END
    END
    // effects created, now add new ability
    INSERT_BYTES            ("%abil_off%" +        ("%abil_num%" * 0x28)) 0x28
      WRITE_EVALUATED_ASCII ("%abil_off%" +        ("%abil_num%" * 0x28)) "%abil_clone%"   // clones last ability
      WRITE_SHORT           ("%abil_off%" + 0x10 + ("%abil_num%" * 0x28)) "%target_level%" // min level
      WRITE_SHORT           ("%abil_off%" + 0x20 + ("%abil_num%" * 0x28)) ("%abil_fx_idx%" + "%abil_fx_num%") // fx index
    SET "target_level" = "%target_level%" + "%step%"
    SET "fx_delta" = ("%fx_delta%" + "%abil_fx_num%")
    SET "abil_num" = "%abil_num%" + 1
    SET "fx_off" = ("%fx_off%" + 0x28)
  END
  WRITE_SHORT 0x68 "%abil_num%"
  WRITE_LONG  0x6a "%fx_off%"

END